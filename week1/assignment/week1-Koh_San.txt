퀴즈 1-1. short, int, long 의 차이점에 대해서 서술하기.
short, int, long을 정수형 자료형이라 한다.
short란 short int의 줄임말이고, long이란 long int의 줄임말이다. 즉  short < int < long임을 알 수 있다.
기본적으로 부호(+, -)가 있으며 부호가 없는 정수형 자료형도 있다.(unsigned short, unsigned int, unsinged long)

short<=int<=long
short should be at least 16bits and long should be at least as long as int, but not smaller than 32 bits.  (c언어 표준)

C 표준에는 위와 같이 나와있다. 즉, short는 16비트(2바이트)보다는 커야 한다.
또한 long은 적어도 int보다 길거나 같아야 하며 32비트(4바이트)보다 커야 한다.
또 위 문장에는 나와있지 않지만 int의 크기는 short보다 같거나 커야 한다.

일반적으로 시스템의 기본연산 단위의 기준은 int, int형의 범위는 시스템 환경(CPU, 컴파일러, 운영체제)에 따라 달라진다는 점에 유의!
16비트 시스템의 int =16비트

32비트 시스템의 int =32비트

64비트 시스템의 int =32비트

64비트 시스템에서도 int의 범위가 32비트인 점에 유의하자.  int의 범위가 long보다 같거나 클 경우 호환성 문제가 생기기 때문.

(short의 범위는 시스템 환경에 상관없이 모두 16비트)
=====================================================================================================================
퀴즈 1-2. float 와 double 의 차이점에 대해서 서술하기.
flot, double을 실수형 자료형이라 한다.
C 언어에서 실수를 처리하기 위해 부동소수점(Float-Point, 숫자와 점, 지수부(비트)와 유효자리부(비트)로 실수를 표현) 방식을 사용한다.

float : 정밀도 32비트(단정밀도), 유효자리수 7자리(소수점이하 6자리), 부호비트(1bit) + 지수(8bit) + 유효자리(23bit)
double : 정밀도 64비트(배정밀도), 유효자리수 16자리(소수점이하 15자리), 부호비트(1bit) + 지수(11bit) + 유효자리(52bit)

컴퓨터로는 부동소수점의 표현, 연산에 한계가 있다. 부동소수점은 일반적인 10진법 소수점 표현법과는 다르기 때문
 => 오차를 줄여서 정밀도, 정확도를 높이는 것이 관건!
=====================================================================================================================
퀴즈 1-3. char 와 String 의 차이점에 대해서 서술하기.
char : 자료형 중 '문자'를 표현하는 것. 숫자를 제외한 문자는 single quota('')로 감싸주어야 한다.
string : 자료형 중 '문자의 집합'인 문자열을 표현하는 것. doble quota ("")로 감싸주어야 한다.
=====================================================================================================================
퀴즈 2-1. 캡슐화라는 것은 무엇인가?
encapsulation.
객체 지향 프로그래밍에서 사용되는 "정보 은닉(내부의 정보를 참조하지 못하도록 하는 것)"을 위한 수단.
클래스와 유사하게 관련있는 객체의 속성(data fields)과 행위(메서드, methods)를 하나로 묶고,
내부에서 구현되는 연산을 private 등의 연산자를 이용하여 외부에서 참조하지 못하도록  하며(정보 은닉, 은닉성),
외부(다른 객체)에는 필요한 정보만 제공하는 것이다.
안전과 보안, 프로그래밍의 효율성 증대, 코드의 단순화를 위해 캡슐화를 한다.

캡슐화의 장점
1. 모듈성 - 시스템 구성하는 부품처럼 사용가능. → 코드의 재사용 용이.
                   객체 조작 방법이 바뀌어도 사용방법은 바뀌지 않음 → 유지보수, 소프트웨어 확장에 용이.
                   적은 양의 코딩으로 프로그램 수정 용이.
2. 독립성 - 외부의 간섭을 차단 → 데이터 변경시에도 다른 객체에 영향 X →  오류가 적게 발생 → 정보의 오남용 및 손상 방지.
3. 이식성 - 객체내에서 처리된 결과만 사용한다.
=====================================================================================================================
퀴즈 2-2. 상속이라는 것은 무엇인가?
inherit.
객체 지향 프로그래밍에서 기본 단위가 되는 클래스는 상위 클래스와 하위 클래스로 구분할 수 있다.(상위 클래스는 부모 클래스, 하위 클래스는 자식 클래스라고도 한다.)
클래스의 상하위 관계를 정립할 때, 하위 클래스는 상위 클래스로부터 상속받는다고 표현한다.
ruby에서는 "하위 클래스 < 상위 클래스"로 표기하며, java에서는 자식클래스 extends 부모클래스와 같이 표현한다.
(예 : apptive 회원 각각의 프로필을 담고 있는 클래스와, apptive 회원의 정보를 담고 있는 클래스(apptive)가 있다고 하자.
apptive 클래스는 10기 회원 및 임원진들의 정보가 있는 하위 클래스를 가지고 있을 것이다.
이경우 10기 고산 회원의 프로필을 담고 있는 클래스 "10기고산"의 상단에 "10기고산 extneds apptive"와 같은 방식으로 작성한다.)
=====================================================================================================================
퀴즈 2-3. 다형성이란 무엇인가?
polymorphism.(폴리모피즘) 본래는 생물학 용어이다. 개체의 어떤 형질이 뚜렷이 구별되는 다양성을 가짐을 의미한다.
프로그래밍에서 다형성은  함수나 메서드가 여러 가지 형태를 가질 수 있도록 하여, 상황에 따라 다른 방법으로 다른 결과를 나오게 할 수 있음을 말한다.
오버로딩이나 오버라이딩으로 구현할 수 있다.

오버로딩(Overloading)
같은 이름의 함수(메서드)를 끝없이 사용하는 개념. 이렇게 형성된 함수(메서드)들은 각기 다른 매개변수의 유형과 개수를 가지게 된다.

오버라이딩(Overriding)
부모 클래스의 한 변수(참조변수)가 자식 클래스들의 여러 타입의 객체들(인스턴스)을 참조하고,
자식 클래스는 부모 클래스가 가진 함수나 메서드를 상속받아 재정의해서 사용하는 것.
=====================================================================================================================